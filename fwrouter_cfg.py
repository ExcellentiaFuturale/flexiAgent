#! /usr/bin/python

################################################################################
# flexiWAN SD-WAN software - flexiEdge, flexiManage.
# For more information go to https://flexiwan.com
#
# Copyright (C) 2019  flexiWAN Ltd.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
################################################################################

import hashlib
import json
import os
import re
import traceback
import yaml

from sqlitedict import SqliteDict

import fwglobals
import fwrouter_api
import fwutils


class FwRouterCfg:
    """This is requests DB class representation.

    :param db_file: SQLite DB file name.
    """
    def __init__(self, db_file):
        """Constructor method
        """
        self.db_filename = db_file
        self.db = SqliteDict(db_file, autocommit=True)

        if self.db.get('signature') is None:
            self.db['signature'] = ""

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        # The three arguments to `__exit__` describe the exception
        # caused the `with` statement execution to fail. If the `with`
        # statement finishes without an exception being raised, these
        # arguments will be `None`.
        self.finalize()

    def finalize(self):
        """Destructor method
        """
        self.db.close()

    def clean(self):
        """Clean DB

        :returns: None.
        """
        for req_key in self.db:
            del self.db[req_key]
        self.reset_signature()

    def _get_request_key(self, req, params):
        """Generates uniq key for request out of request name 'req' and
        request parameters 'params'. To do that uses function defined in the
        correspondent translator file, e.g. fwtranslate_add_tunnel.py.

        !IMPORTANT!  keep this function internal! No one should be aware of
                     database implementation. If you feel need to expose this
                     function, please consider to add API to this class
                     that encapsulates the needed functionality!
        """
        src_req      = fwrouter_api.fwrouter_translators[req].get('src', req)  # 'remove-X' requests use key generator of correspondent 'add-X' requests
        src_module   = fwrouter_api.fwrouter_modules.get(fwrouter_api.fwrouter_translators[src_req]['module'])
        src_key_func = getattr(src_module, fwrouter_api.fwrouter_translators[src_req]['key_func'])
        src_req_key  = src_key_func(params)
        return src_req_key

    def update(self, req, params, cmd_list=None, executed=False):
        """Save configuration request into DB.
        The 'add-X' configuration requests are stored in DB, the 'remove-X'
        requests are not stored but remove the correspondent 'add-X' requests.

        :param req:         The request, e.g. 'add-tunnel'.
        :param params:      The dictionary with request parameters, e.g. {'id':1}.
        :param cmd_list:    List of commands to be executed in order to fullfil
                            configuration request. The command can invoke VPP API,
                            run Linux shell commands, update internal agent objects,
                            etc. They are generated by generated by translation.
        :param executed:    The 'executed' flag - True if the configuration
                            request was translated and executed, False if it was
                            translated but was not executed.
        :returns: None.
        """
        req_key = self._get_request_key(req, params)
        try:
            if re.match('add-', req) or re.match('start-router', req):
                self.db[req_key] = { 'request' : req , 'params' : params , 'cmd_list' : cmd_list , 'executed' : executed }
            else:
                del self.db[req_key]
        except KeyError:
            pass
        except Exception as e:
            fwglobals.log.error("FwRouterCfg.update(%s) failed: %s, %s" % \
                        (req_key, str(e), traceback.format_exc()))
            raise Exception('failed to update request database')


    def get_request_params(self, req, params):
        """Retrives parameters of the request with name 'req' and parameters
        'params'. I know that it sounds weired :) This is hack. We use this
        function to retrieve parameters of the 'add-X' requests stored in DB,
        when the provided request is correspondent 'remove-X'.
        Note:
            - the 'remove-X' requests are not stored in DB
            - the 'remove-X' 'params' is a subset of the 'add-X' 'params',
              which is sufficient to generate DB key.

        :param req:         The name of the 'remove-X' request, e.g. 'remove-tunnel'.
        :param params:      The parameters of the 'remove-X' request.

        :returns: the parameters of the correspondent 'add-X' request.
        """
        req_key = self._get_request_key(req, params)
        if not req_key in self.db:
            return None
        return self.db[req_key].get('params')

    def get_request_cmd_list(self, req, params):
        """Retrives translation of the request to list of commands.

        :param req:    The name of the request, e.g. 'remove-tunnel'
        :param params: The parameters of the request, e.g. {'id':'1'}

        :returns: the tuple of the command list and the 'executed' flag
        """
        req_key = self._get_request_key(req, params)
        if not req_key in self.db:
            return (None, None)
        return (self.db[req_key].get('cmd_list'), self.db[req_key].get('executed'))

    def exists(self, req, params=None):
        """Check if entry exists in DB.

        :param req:  name of configuration request.

        :returns: 'True' if request exists and 'False' otherwise.
        """
        req_key = self._get_request_key(req, params)
        res = True if req_key in self.db else False
        return res

    def dump(self, types=None, escape=None, full=False, keys=False):
        """Dumps router configuration into list of requests that look exactly
        as they would look if were received from server.

        Note the dump order of configuration requests follows oreder of request
        types in 'types' argument.

        :param types:  list of types of configuration requests to be dumped, e.g. [ 'add-interface' , 'add-tunnel' ]
        :param escape: list of types of configuration requests that should be escaped while dumping
        :param full:   return requests together with translated commands.
        :param keys:   return requests with request key used by DB to identify request.

        :returns: list of configuration requests stored in DB.
        """
        if not types:
            types = [
                'start-router',
                'add-interface',
                'add-tunnel',
                'add-route',		# routes should come after tunnels, as they might use them
                'add-dhcp-config',
                'add-application',
                'add-multilink-policy'
            ]
        if escape:
            for t in escape:
                types.remove(t)

        # The dump is O(num_types x n) - improve that on demand!
        cfg = []
        for req in types:
            for key in self.db:
                if re.match(req, key):
                    request = {
                        'message': self.db[key].get('request',""),
                        'params':  self.db[key].get('params', "")
                    }
                    if full:
                        request.update({
                            'cmd_list': self.db[key].get('cmd_list', ""),
                            'executed': self.db[key].get('executed', "")})
                    if keys:
                        request.update({'key': key})
                    cfg.append(request)
        return cfg

    def dumps(self, types=None, escape=None, full=False):
        """Dumps router configuration into printable string.

        :param types:  list of types of configuration requests to be dumped, e.g. [ 'add-interface' , 'add-tunnel' ]
        :param escape: list of types of configuration requests that should be escaped while dumping
        :param full:   return requests together with translated commands.
        """
        sections = {
            'start-router':         "======== START COMMAND =======",
            'add-interface':        "========== INTERFACES ========",
            'add-route':            "============ ROUTES ==========",
            'add-tunnel':           "============ TUNNELS =========",
            'add-dhcp-config':      "========= DHCP CONFIG ========",
            'add-application':      "========= APPLICATIONS =======",
            'add-multilink-policy': "=========== POLICIES ========="
        }

        out = {}
        prev_msg = { 'message': 'undefined' }

        cfg = self.dump(types=types, escape=escape, full=full, keys=True)
        for msg in cfg:
            # Add new section
            if msg['message'] != prev_msg['message']:
                prev_msg['message'] = msg['message']
                section_name = sections[msg['message']]
                out[section_name] = []

            # Add configuration item to section
            item = {
                'Key ':   msg['key'],
                'Params': msg['params']
            }
            if full:
                item.update({'Executed': str(msg['executed'])})
                item.update({'Commands': fwutils.yaml_dump(msg['cmd_list']).split('\n')})
            out[section_name].append(item)
        if not out:
            return ''
        return json.dumps(out, indent=2)

    def _get_requests(self, req):
        """Retrives list of configuration requests parameters for requests with
        the 'req' name.
        This is generic function wrapped by request specific one-line APIs,
        like get_tunnels().

        :param req:         The request name, e.g. 'add-tunnel'.
        :returns: list of request parameters.
        """
        requests = []
        for key in self.db:
            if re.match(req, key):
                requests.append(self.db[key]['params'])
        return requests

    def get_interfaces(self, type=None, pci=None):
        interfaces = self._get_requests('add-interface')
        if not type and not pci:
            return interfaces
        for params in interfaces:
            if type and not re.match(type, params['type'], re.IGNORECASE):
                interfaces.remove(params)
            elif pci and pci != params['pci']:
                interfaces.remove(params)
        return interfaces

    def get_tunnels(self):
        return self._get_requests('add-tunnel')

    def get_multilink_policy(self):
        if 'add-multilink-policy' in self.db:
            return self.db['add-multilink-policy']['params']
        return None

    def get_applications(self):
        if 'add-application' in self.db:
            return self.db['add-application']['params']
        return None

    def get_wan_interface_gw(self, ip):
        import fwutils
        interfaces = self.get_interfaces()
        for params in interfaces:
            if re.match('wan', params['type'], re.IGNORECASE):
                if re.search(ip, params['addr']):
                    pci = params['pci']
                    gw  = params.get('gateway')
                    # If gateway not exist in interface configuration, use default
                    # This is needed when upgrading from version 1.1.52 to 1.2.X
                    if not gw:
                        tap = fwutils.pci_to_tap(pci)
                        rip, unused_metric = fwutils.get_linux_interface_gateway(tap)
                        return pci, rip
                    else:
                        return pci, gw
        return (None, None)

    def get_interface_ips(self, pci_list=None):
        """Fetches IP-s of interfaces stored in the configuration database.

        :param pci_list: filter interfaces to be handled by pci.

        :returns: list of IP addresses. The addresses are without length.
        """
        if_ips = []
        interfaces = self.get_interfaces()
        for params in interfaces:
            if not pci_list or params['pci'] in pci_list:
                if_ips.append(params['addr'].split('/')[0])
        return if_ips


    def update_signature(self, request):
        """Updates the database signature.
        This function assists the database synchronization feature that keeps
        the configuration set by user on the flexiManage in sync with the one
        stored on the flexiEdge device.
            The initial signature of the database is empty string. Than on every
        successfully handled request it is updated according following formula:
                signature = sha1(signature + request)
        where both signature and delta are strings.

        :param request: the last successfully handled router configuration
                        request, e.g. add-interface, remove-tunnel, modify-device,
                        etc. As configuration database signature should reflect
                        the latest configuration, it should be updated with this
                        request.
        """
        current     = self.db['signature']
        delta       = json.dumps(request, separators=(',', ':'), sort_keys=True)
        hash_object = hashlib.sha1(current + delta)
        new         = hash_object.hexdigest()

        self.db['signature'] = new
        fwglobals.log.debug("fwrouter_cfg: sha1: new=%s, current=%s, delta=%s" %
                            (str(new), str(current), str(delta)))

    def get_signature(self):
        """Retrives signature of the current configuration.
        The signature is SHA-1 based hash on requests store in local database.

        :returns: the signature as a string.
        """
        return self.db['signature']

    def reset_signature(self):
        """Resets configuration signature to the empty sting.
        """
        if not 'signature' in self.db:
            self.db['signature'] = ""
        if self.db['signature']:
            fwglobals.log.debug("fwrouter_cfg: reset signature")
            self.db['signature'] = ""

    def get_sync_list(self, requests):
        """Intersects requests provided within 'requests' argument against
        the requests stored in the local database and generates delta list that
        can be used for synchronization of router configuration. This delta list
        is called sync-list. It includes sequence of 'remove-X' and 'add-X'
        requests that should be applied to device in order to configure it with
        the configuration, reflected in the input list 'requests'.
            Order of requests in the sync-list is important for proper
        configuration of VPP! The list should start with the 'remove-X' requests
        in order to remove not needed configuration items and to modify existing
        configuration in following order:
            [ 'add-multilink-policy', 'add-application', 'add-dhcp-config', 'add-route', 'add-tunnel', 'add-interface' ]
        Than the sync-list should include the 'add-X' requests to add missing
        configuration items or to complete modification of existing configuration
        items. The 'add-X' requests should be added in order opposite to the
        'remove-X' requests:
            [ 'add-interface', 'add-tunnel', 'add-route', 'add-dhcp-config', 'add-application', 'add-multilink-policy' ]
        Note the modification is broken into pair of correspondent 'remove-X' and
        'add-X' requests.

        :param requests: list of requests that reflects the desired configuration.
                         The requests are in formant of flexiManage<->flexiEdge
                         message: { 'message': 'add-X', 'params': {...}}.

        :returns: synchronization list - list of 'remove-X' and 'add-X' requests
                         that takes device to the desired configuration if applied
                         to the device.
        """

        # Firstly we hack a little bit the input list as follows:
        # build dictionary out of this list where values are list elements
        # (requests) and keys are request keys that local database would use
        # to store these requests. Accidentally these are exactly same keys
        # dumped by fwglobals.g.router_cfg.dump() used below ;)
        #
        desired_requests = {}
        for request in requests:
            key = self._get_request_key(request['message'], request.get('params'))
            desired_requests.update(request)

        # Now dump local configuration in order of 'remove-X' list
        #
        add_order = [ 'add-interface', 'add-tunnel', 'add-route', 'add-dhcp-config', 'add-application', 'add-multilink-policy' ]
        remove_order = add_order.reverse()
        delta_list = fwglobals.g.router_cfg.dump(types=remove_order, keys=True)

        # Now go over dumped requests and remove those that present in the input
        # list and that have same parameters. They correspond to configuration
        # items that should be not touched by synchronization. The dumped requests
        # that present in the input list but have different parameters stand
        # for modifications. They should be added to the delta list as 'remove-X'
        # and than added again as 'add-X' later as it would be a new configuration
        # item.
        #
        for (idx, request) in enumerate(delta_list):
            dumped_key = request['key']
            if dumped_key in desired_requests:
                dumped_params  = request.get('params')
                desired_params = desired_requests[dumped_key].get('params')
                if dumped_params == desired_params:
                    # Exactly same configuration item should be removed from
                    # delta list. As well we remove it from input list to avoid
                    # adding it back to delta list later with 'add-X' requests.
                    #
                    del delta_list[idx]
                    requests.remove(desired_requests[dumped_key])
                else:
                    # The modified configuration item should stay in both
                    # the delta list and the input list. Though in delta list
                    # it should come with 'remove-X' request name.
                    # It should stay in the input list to be added later as 'add-X'.
                    #
                    request['message'] = request['message'].replace('add-', 'remove-')
            else:
                # The configuration item does not present in the input list.
                # So it stands for item to be removed.
                #
                request['message'] = request['message'].replace('add-', 'remove-')

        # At this point the input list includes 'add-X' requests that stand
        # for new or for modified configuration items.
        # Just go and add them to the delta list 'as-is'.
        # Note we don't rely on order of requests in the input list, so we go
        # and do double cycling of O(n x m) to ensure proper order.
        for req in add_order:
            for request in requests:
                if request['message'] == req:
                    delta_list.append(request)

        return delta_list
